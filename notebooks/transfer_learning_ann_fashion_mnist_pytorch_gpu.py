# -*- coding: utf-8 -*-
"""transfer-learning-ann-fashion-mnist-pytorch-gpu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WERnTSPuJfGgcNYDr--QataONr00rQkO
"""

import pandas as pd
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt

# Set random seeds for reproducibility
torch.manual_seed(42)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"using device: {device}")

df = pd.read_csv('fashion-mnist_train.csv')
df.head()

df.shape

# Create a 4x4 grid of images
fig, axes = plt.subplots(4, 4, figsize=(10, 10))
fig.suptitle("First 16 Images", fontsize=16)

# Plot the first 16 images from the dataset
for i, ax in enumerate(axes.flat):
    img = df.iloc[i, 1:].values.reshape(28, 28)  # Reshape to 28x28
    ax.imshow(img)  # Display in grayscale
    ax.axis('off')  # Remove axis for a cleaner look
    ax.set_title(f"Label: {df.iloc[i, 0]}")  # Show the label

plt.tight_layout(rect=[0, 0, 1, 0.96])  # Adjust layout to fit the title
plt.show()

# train test split

X = df.iloc[:, 1:].values
y = df.iloc[:, 0].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#transformation
from torchvision.transforms import transforms

custom_transform = transforms.Compose([
    transforms.Resize(256), #interpolationMode
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

from PIL import Image
import numpy as np

class CustomDataset(Dataset):
  def __init__(self,features,labels,transform):
    self.features = features
    self.labels = labels
    self.transform = transform

  def __len__(self):
    return len(self.features)

  def __getitem__(self,index):
    #resize to (28,28)
    image = self.features[index].reshape(28,28)
    #change datatype (np.uint8)
    image = image.astype(np.uint8)
    #change 1D b/w to 3D color -> (H,W,C) -> (C,H,W)
    image = np.stack([image]*3, axis=-1)
    #convert array to PIL
    image = Image.fromarray(image)

    # apply transforms
    image = self.transform(image)
    #return
    return image, torch.tensor(self.labels[index],dtype=torch.long)

# create train_dataset object
train_dataset = CustomDataset(X_train, y_train, transform=custom_transform)
test_dataset = CustomDataset(X_test, y_test, transform=custom_transform)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, pin_memory=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False, pin_memory=True)

#VGG-16 -Transfer Learning
import torchvision.models as models

vgg16 = models.vgg16(pretrained=True)

vgg16

for param in vgg16.features.parameters():
  param.requires_grad = False #freeze parameters of features

vgg16.classifier = nn.Sequential(
    nn.Linear(in_features=25088, out_features=1024),
    nn.ReLU(),
    nn.Dropout(0.5),
    nn.Linear(in_features=1024, out_features=512),
    nn.ReLU(),
    nn.Dropout(0.5),
    nn.Linear(in_features=512, out_features=10),
)

# vgg16

vgg16 = vgg16.to(device)

# set learning rate and epochs
epochs = 10
learning_rate = 0.001

# loss function
criterion = nn.CrossEntropyLoss()
# optimizer
optimizer = optim.Adam(vgg16.classifier.parameters(), lr=learning_rate)

len(train_loader)

# training loop

for epoch in range(epochs):

  total_epoch_loss = 0

  for batch_features, batch_labels in train_loader:

    # move data to gpu
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    # forward pass
    outputs = vgg16(batch_features)

    # calculate loss
    loss = criterion(outputs, batch_labels)

    # back pass
    optimizer.zero_grad()
    loss.backward()

    # update grads
    optimizer.step()

    total_epoch_loss = total_epoch_loss + loss.item()

  avg_loss = total_epoch_loss/len(train_loader)
  print(f'Epoch: {epoch + 1} , Loss: {avg_loss}')

# set model to eval mode
vgg16.eval()

# evaluation code
total = 0
correct = 0

with torch.no_grad():
  for batch_features, batch_labels in test_loader:
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    outputs = vgg16(batch_features)

    _, predicted = torch.max(outputs, 1)

    total = total + batch_labels.shape[0]

    correct = correct + (predicted == batch_labels).sum().item()

print(f"Test Accuracy:{correct/total}")

# evaluation code for trainning
total = 0
correct = 0

with torch.no_grad():
  for batch_features, batch_labels in train_loader:
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    outputs = vgg16(batch_features)

    _, predicted = torch.max(outputs, 1)

    total = total + batch_labels.shape[0]

    correct = correct + (predicted == batch_labels).sum().item()

print(f"Training Accuracy:{correct/total}")

